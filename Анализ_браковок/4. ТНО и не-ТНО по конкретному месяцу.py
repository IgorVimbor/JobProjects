import pandas as pd
from datetime import date
import matplotlib.pyplot as plt
import warnings
import reference_files.reference_data as rd

# Команда для удаления предупреждений Pandas в консоли
warnings.simplefilter(action="ignore", category=Warning)

# --------------------------------------- Подготовка датафрейма ---------------------------------
# считываем данные из файла Excel и создаем фрейм
df = pd.read_excel(
    "//Server/otk/2 ИННА/Списание БРАКА по ЦЕХАМ/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xlsx",
    sheet_name="2024",
    usecols=[
        "Дата_регистрации_акта_НП",
        "Наименование_детали",
        "Обозначение_детали",
        "Количество",
        "Сумма_по_акту",
        "ПРИЧИНА",
        "ВИНОВНИК",
        "Цех_участок",
        "Операция",
        "Описание_дефектов_и_причин",
        "Основание_для_списания (КТУ, акт, протокол и др.)",
    ],
    header=1,
)

# удаляем пустые строки в столбце "Дата_регистрации_акта_НП" и "Сумма_по_акту"
df.dropna(subset=["Дата_регистрации_акта_НП", "Сумма_по_акту"], inplace=True)

# изменяем тип данных в столбце "Дата_регистрации_акта_НП" на datetime
df["Дата_регистрации_акта_НП"] = pd.to_datetime(
    df["Дата_регистрации_акта_НП"], errors="coerce"
)

# изменяем тип данных в столбцах 'Количество', 'ПРИЧИНА', 'ВИНОВНИК' на целочисленный
df[["Количество", "ПРИЧИНА", "ВИНОВНИК"]] = df[
    ["Количество", "ПРИЧИНА", "ВИНОВНИК"]
].astype("int16")

# ---------------------------- Выборка из датафрейма по номеру месяца ----------------------------
# Фильтруем датафрейм по номеру месяца ... июль = 7 и т.д.
dfn = df[df["Дата_регистрации_акта_НП"].dt.month == 7]

# ------------------------------------- Датафрейм ТНО --------------------------------------------
# Формируем датафрейм ТНО
dfn_tno = dfn[dfn["ПРИЧИНА"].isin([8, 23, 24])]

# Заменяем в датафрейме шифр ПРИЧИНЫ на текст по словарю из вспомогательного файла
dfn_tno["ПРИЧИНА"] = dfn_tno["ПРИЧИНА"].map(rd.dct_pric)

# Группируем по столбцам "Наименование_детали", 'Обозначение_детали', "ПРИЧИНА"
# и считаем сумму по столбцу "Количество" и "Сумма_по_акту"
df_tno_group = (
    dfn_tno.groupby(["Наименование_детали", "Обозначение_детали", "ПРИЧИНА"])
    .agg({"Количество": sum, "Сумма_по_акту": sum})
    .astype({"Количество": "int"})
).sort_values("Сумма_по_акту", ascending=False)

# Расчитываем сумму значений в столбце 'Сумма_по_акту'
sum_col = df_tno_group["Сумма_по_акту"].sum()

# Добавляем в конец новые строки с черточками для визуализации
# и с суммой с учетом мультииндекса ["Наименование_детали", 'Обозначение_детали', "ПРИЧИНА"]
df_tno_group.loc[(f"{'-'*16}", "", "")] = ["", f"{'-'*10}"]
df_tno_group.loc[("ИТОГО", "", "")] = ["", sum_col]

# сохраняем в файл .txt
with open(f"ОТЧЕТЫ/Отчет за июль 2024 года - ТНО.txt", "w", encoding="utf-8") as file:
    print(f"\tОтчет за июль 2024 года - ТНО", file=file)
    file.write(df_tno_group.to_string())

print("\nОтчет по ТНО записан.")

# ----------------------------------- Датафрейм не-ТНО --------------------------------------------
dfn_no_tno = dfn[~dfn["ПРИЧИНА"].isin([8, 23, 24])]
dfn_no_tno["ПРИЧИНА"] = dfn_no_tno["ПРИЧИНА"].map(rd.dct_pric)

df_no_tno_group = (
    dfn_no_tno.groupby(["Наименование_детали", "Обозначение_детали", "ПРИЧИНА"])
    .agg({"Количество": sum, "Сумма_по_акту": sum})
    .astype({"Количество": "int"})
).sort_values("Сумма_по_акту", ascending=False)

sum_col = df_no_tno_group["Сумма_по_акту"].sum()
df_no_tno_group.loc[(f"{'-'*16}", "", "")] = ["", f"{'-'*10}"]
df_no_tno_group.loc[("ИТОГО", "", "")] = ["", sum_col]

with open(
    f"ОТЧЕТЫ/Отчет за июль 2024 года - не ТНО.txt", "w", encoding="utf-8"
) as file:
    print(f"\tОтчет за июль 2024 года - не ТНО", file=file)
    file.write(df_no_tno_group.to_string())

print("\nОтчет по не-ТНО записан.\n")
# --------------------------------------------------------------------------------------------------
