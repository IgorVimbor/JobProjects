import pandas as pd
from datetime import date
import matplotlib.pyplot as plt
import warnings


# Команда для удаления предупреждений Pandas в консоли
warnings.simplefilter(action="ignore", category=Warning)

# -------------------------------------- Считываем файл и создаем фрейм ----------------------------------------
# "example_files/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xls"
# считываем данные из файла Excel и создаем фрейм
df = pd.read_excel(
    "//Server/otk/2 ИННА/Списание БРАКА по ЦЕХАМ/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xls",
    sheet_name="2023",
    usecols=[
        "Дата_регистрации_акта_НП",
        "Наименование_детали",
        "Обозначение_детали",
        "Количество",
        "Сумма_по_акту",
        "ПРИЧИНА",
        "ВИНОВНИК",
        "Цех_участок",
        "Операция",
        "Описание_дефектов_и_причин",
        "Основание_для_списания (КТУ, акт, протокол и др.)",
    ],
    header=1,
)
# исходный фрейм из файла Excel
"""
  Дата_регистрации_акта_НП Наименование_детали Обозначение_детали  ...  Операция  Описание_дефектов_и_причин  Основание_для_списания (КТУ, акт, протокол и др.)
0               2024-01-18  корпус компрессора        700-1118020  ...       020                         NaN                       ММЗ акт №15-4461 от 28.11.23
1               2024-01-10            шестерня         50-1403228  ...       005          замена инструмента                                                NaN
2               2024-01-10            шестерня        240-1403228  ...       005          замена инструмента                                                NaN
3               2024-01-10            шестерня        245-1403228  ...       005          замена инструмента                                                NaN
4               2024-01-10            шестерня         А29.01.200  ...       005          замена инструмента                                                NaN
"""

# описание исходного фрейма
"""
#   Column                                             Non-Null Count  Dtype
---  ------                                             --------------  -----
 0   Дата_регистрации_акта_НП                           194 non-null    datetime64[ns]
 1   Наименование_детали                                194 non-null    object
 2   Обозначение_детали                                 194 non-null    object
 3   Количество                                         194 non-null    float64
 4   Сумма_по_акту                                      158 non-null    float64
 5   ПРИЧИНА                                            194 non-null    float64
 6   ВИНОВНИК                                           194 non-null    float64
 7   Цех_участок                                        194 non-null    object
 8   Операция                                           157 non-null    object
 9   Описание_дефектов_и_причин                         154 non-null    object
 10  Основание_для_списания (КТУ, акт, протокол и др.)  2 non-null      object
dtypes: datetime64[ns](1), float64(4), object(6)
memory usage: 15.7+ KB
"""

# удаляем пустые строки в столбце "Сумма_по_акту"
df.dropna(subset=["Сумма_по_акту"], inplace=True)
# описание фрейма после удаления пустых строк
"""
#   Column                                             Non-Null Count  Dtype
---  ------                                             --------------  -----
 0   Дата_регистрации_акта_НП                           158 non-null    datetime64[ns]
 1   Наименование_детали                                158 non-null    object
 2   Обозначение_детали                                 158 non-null    object
 3   Количество                                         158 non-null    float64
 4   Сумма_по_акту                                      158 non-null    float64
 5   ПРИЧИНА                                            158 non-null    float64
 6   ВИНОВНИК                                           158 non-null    float64
 7   Цех_участок                                        158 non-null    object
 8   Операция                                           156 non-null    object
 9   Описание_дефектов_и_причин                         153 non-null    object
 10  Основание_для_списания (КТУ, акт, протокол и др.)  2 non-null      object
dtypes: datetime64[ns](1), float64(4), object(6)
memory usage: 11.1+ KB
"""

# -------------------------------------------- Итог за ГОД по ТОП-10 по месяцам года -------------------------------------------------
# вспомогательный словарь номера и наименования месяца года
dct = {
    1: "январь",
    2: "февраль",
    3: "март",
    4: "апрель",
    5: "май",
    6: "июнь",
    7: "июль",
    8: "август",
    9: "сентябрь",
    10: "октябрь",
    11: "ноябрь",
    12: "декабрь",
}
# сохраняем в переменную год по которому делаем анализ
year = df["Дата_регистрации_акта_НП"].dt.year.unique()[0]
# создаем список месяцев года по которым есть информация в базе
monthes = df["Дата_регистрации_акта_НП"].dt.month.unique().tolist()
dfs = []  # список фреймов

# циклом по номерам месяцев (ключам словаря)
for key in dct.keys():
    # если номер месяца есть в списке
    if key in monthes:
        # из исходного фрейма по номеру месяца оставляем только нужные столбцы
        df_tmp = df[df["Дата_регистрации_акта_НП"].dt.month == key][
            ["Наименование_детали", "Обозначение_детали", "Количество", "Сумма_по_акту"]
        ]
        # группируем по Наименованию и Обозначению и считаем суммы по столбцам Количество и Сумма по акту
        df_tmp_top = (
            df_tmp.groupby(["Наименование_детали", "Обозначение_детали"])
            .agg({"Количество": sum, "Сумма_по_акту": sum})
            .astype({"Количество": "int"})
        )
        # формируем итоговый фрейм ТОП-10 по столбцу Сумма по акту
        res = df_tmp_top.nlargest(10, columns="Сумма_по_акту")
        # добавляем столбец с кумулятивной суммой по столбцу Сумма по акту
        res["С накоплением"] = res["Сумма_по_акту"].cumsum().round(2)

        dfs.append(res)  # добавляем итоговый фрейм в список фреймов


# Объединяем все фреймы из списка dfs в один датафрейм
df_union = pd.concat(dfs, ignore_index=False).reset_index()

# удаляем столбец "С накоплением", т.к. будем считать его заново
df_union.drop("С накоплением", axis=1, inplace=True)

# описание полученного объединенного фрейма
"""
#   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   Наименование_детали  120 non-null    object
 1   Обозначение_детали   120 non-null    object
 2   Количество           120 non-null    int32
 3   Сумма_по_акту        120 non-null    float64
dtypes: float64(1), int32(1), object(2)
"""
# print(df_union)
"""
    Наименование_детали Обозначение_детали  Количество  Сумма_по_акту  С накоплением
0            корпус ЦМФ        245-1017025         112        2116.80        2116.80
1        вал коленчатый       5336-3509110          41         750.71        2867.51
2            корпус в/н        245-1307025          25         512.00        3379.51
3        вал коленчатый         А29.01.004          59         441.32        3820.83
4            ось ротора       240-1404012В          97         413.22        4234.05
..                  ...                ...         ...            ...            ...
115                шкив  КБПА451.363.10.16          52         741.52        6827.86
116        блок картера       5336-3509076          18         575.46        7403.32
117      колесо турбины        600-1118072          14         542.78        7946.10
118          корпус м/н        240-1403025          59         521.56        8467.66
119      вал коленчатый          А9.01.004          53         455.80        8923.46
"""

# для проверки считаем суммы по столбцам фрейма
# print(df_union["Количество"].sum())  # 6909
# print(round(df_union["Сумма_по_акту"].sum(), 2))  # 99030.76

# группируем по Наименованию и Обозначению, считаем суммы по столбцам Количество и Сумма по акту, сортируем по Сумма_по_акту
df_top = (
    df_union.groupby(["Наименование_детали", "Обозначение_детали"])
    .agg({"Количество": sum, "Сумма_по_акту": sum})
    .astype({"Количество": "int"})
).sort_values("Сумма_по_акту", ascending=False)

# проверяем сгруппированные значения
# print(df_top["Количество"].sum())  # 6909
# print(round(df_top["Сумма_по_акту"].sum(), 2))  # 99030.76

# добавляем столбец с кумулятивной суммой по столбцу Сумма по акту
df_top["С накоплением"] = df_top["Сумма_по_акту"].cumsum().round(2)
# print(df_top)
"""
                                        Количество  Сумма_по_акту  С накоплением
Наименование_детали Обозначение_детали
вал коленчатый      5336-3509110               675       12410.77       12410.77
м/н                 КБПА 45141236               95        9204.12       21614.89
корпус в/н          245-1307025                448        8583.43       30198.32
вал коленчатый      А29.01.004                 644        5158.72       35357.04
колесо турбины      600-1118072                112        4342.24       39699.28
...                                            ...            ...            ...
шестерня            А29.05.200                  70         231.50       98328.83
                    245-1403228                 27         187.92       98516.75
корпус компрессора  КБПА451110000               12         173.52       98690.27
крыльчатка          КБПА451363.10.32            35         172.55       98862.82
корпус компрессора  706-1118130                  6         167.94       99030.76

[61 rows x 3 columns]
"""
# сохраняем в файл .txt по номеру года
with open(
    f"4.1 Сводный итог за {year} год по ТОП-10.txt", "w", encoding="utf-8"
) as file:
    print(f"\tСводные данные за {year} год по ТОП-10 по месяцам года", file=file)
    file.write(df_top.to_string())

# вариант с сохранением в файл .csv
# df_top.to_csv(f"4.1 Сводный итог за {year} год по ТОП-10.txt", sep="\t", mode="w")

print("Файл записан")
