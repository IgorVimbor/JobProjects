import pandas as pd
from datetime import date, datetime
import matplotlib.pyplot as plt
import warnings


# Команда для удаления предупреждений Pandas в консоли
warnings.simplefilter(action="ignore", category=Warning)

# -------------------------------------- Считываем файл и создаем фрейм ----------------------------------------
# "example_files/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xls"
# считываем данные из файла Excel и создаем фрейм
df = pd.read_excel(
    "//Server/otk/2 ИННА/Списание БРАКА по ЦЕХАМ/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xlsx",
    sheet_name="2024",
    usecols=[
        "Дата_регистрации_акта_НП",
        "Наименование_детали",
        "Обозначение_детали",
        "Количество",
        "Сумма_по_акту",
        "ПРИЧИНА",
        "ВИНОВНИК",
        "Цех_участок",
        "Операция",
        "Описание_дефектов_и_причин",
        "Основание_для_списания (КТУ, акт, протокол и др.)",
    ],
    header=1,
)

# изменяем тип данных в столбце "Дата_регистрации_акта_НП" на datetime
df["Дата_регистрации_акта_НП"] = pd.to_datetime(
    df["Дата_регистрации_акта_НП"], errors="coerce"
)

# удаляем пустые строки в столбце "Дата_регистрации_акта_НП" и "Сумма_по_акту"
df.dropna(subset=["Дата_регистрации_акта_НП", "Сумма_по_акту"], inplace=True)

# -------------------------------------------- ТОП 10 по МЕСЯЦУ ГОДА ------------------------------------------------------
# получаем текущую дату
now = datetime.now()
# номер предыдущего месяца (если текущий это январь, то номер 12, иначе - минус 1)
months_pred = 12 if now.month == 1 else now.month - 1

# из исходного фрейма по номеру месяца оставляем только нужные столбцы
df_1 = df[df["Дата_регистрации_акта_НП"].dt.month == months_pred][
    ["Наименование_детали", "Обозначение_детали", "Количество", "Сумма_по_акту"]
]

# группируем по Наименованию и Обозначению и считаем суммы по столбцам Количество и Сумма по акту
df_1_top = (
    df_1.groupby(["Наименование_детали", "Обозначение_детали"])
    .agg({"Количество": sum, "Сумма_по_акту": sum})
    .astype({"Количество": "int"})
)

# формируем итоговый фрейм ТОП-10 по столбцу Сумма по акту
res = df_1_top.nlargest(10, columns="Сумма_по_акту")

# добавляем столбец с кумулятивной суммой по столбцу Сумма по акту
# res["С накоплением"] = res["Сумма_по_акту"].cumsum().round(2)

print(res)
print()
# Суммы по столбцу 'Сумма_по_акту' таблицы df_1_top и res
total_df_top = df_1_top["Сумма_по_акту"].sum()
total_res = res["Сумма_по_акту"].sum()

print(f"Сумма по списанию брака в выборке ТОП: {total_res} руб.")
print(
    f"Сумма по выборке ТОП составляет {round(total_res / total_df_top *100, 2)}% от общей суммы списания."
)
