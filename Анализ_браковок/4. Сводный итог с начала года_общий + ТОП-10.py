import pandas as pd
from datetime import date
import matplotlib.pyplot as plt
import warnings


# Команда для удаления предупреждений Pandas в консоли
warnings.simplefilter(action="ignore", category=Warning)

# -------------------------------------- Считываем файл и создаем фрейм ----------------------------------------
# "example_files/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xls"
# считываем данные из файла Excel и создаем фрейм
df = pd.read_excel(
    "//Server/otk/2 ИННА/Списание БРАКА по ЦЕХАМ/ЖУРНАЛ УЧЕТА актов о браке_2020-2024.xlsx",
    sheet_name="2024",
    usecols=[
        "Дата_регистрации_акта_НП",
        "Наименование_детали",
        "Обозначение_детали",
        "Количество",
        "Сумма_по_акту",
        "ПРИЧИНА",
        "ВИНОВНИК",
        "Цех_участок",
        "Операция",
        "Описание_дефектов_и_причин",
        "Основание_для_списания (КТУ, акт, протокол и др.)",
    ],
    header=1,
)

# изменяем тип данных в столбце "Дата_регистрации_акта_НП" на datetime
df["Дата_регистрации_акта_НП"] = pd.to_datetime(
    df["Дата_регистрации_акта_НП"], errors="coerce"
)

# удаляем пустые строки в столбце "Сумма_по_акту"
df.dropna(subset=["Сумма_по_акту"], inplace=True)

# -------------------------------------------- Итог за ГОД по ТОП-10 по месяцам года -------------------------------------------------
# вспомогательный словарь номера и наименования месяца года
dct = {
    1: "январь",
    2: "февраль",
    3: "март",
    4: "апрель",
    5: "май",
    6: "июнь",
    7: "июль",
    8: "август",
    9: "сентябрь",
    10: "октябрь",
    11: "ноябрь",
    12: "декабрь",
}
# сохраняем в переменную год по которому делаем анализ
year = int(df["Дата_регистрации_акта_НП"].dt.year.unique()[0])
# создаем список месяцев года по которым есть информация в базе
monthes = df["Дата_регистрации_акта_НП"].dt.month.unique().tolist()
dfs = []  # список фреймов

# циклом по номерам месяцев (ключам словаря)
for key in dct.keys():
    # если номер месяца есть в списке
    if key in monthes:
        # из исходного фрейма по номеру месяца оставляем только нужные столбцы
        df_tmp = df[df["Дата_регистрации_акта_НП"].dt.month == key][
            ["Наименование_детали", "Обозначение_детали", "Количество", "Сумма_по_акту"]
        ]
        # группируем по Наименованию и Обозначению и считаем суммы по столбцам Количество и Сумма по акту
        df_tmp_top = (
            df_tmp.groupby(["Наименование_детали", "Обозначение_детали"])
            .agg({"Количество": sum, "Сумма_по_акту": sum})
            .astype({"Количество": "int"})
        )
        # формируем итоговый фрейм ТОП-10 по столбцу Сумма по акту
        res = df_tmp_top.nlargest(10, columns="Сумма_по_акту")
        # добавляем столбец с кумулятивной суммой по столбцу Сумма по акту
        res["С накоплением"] = res["Сумма_по_акту"].cumsum().round(2)

        dfs.append(res)  # добавляем итоговый фрейм в список фреймов


# Объединяем все фреймы из списка dfs в один датафрейм
df_union = pd.concat(dfs, ignore_index=False).reset_index()

# удаляем столбец "С накоплением", т.к. будем считать его заново
df_union.drop("С накоплением", axis=1, inplace=True)

# для проверки считаем суммы по столбцам фрейма
# print(df_union["Количество"].sum())  # 6909
# print(round(df_union["Сумма_по_акту"].sum(), 2))  # 99030.76

# группируем по Наименованию и Обозначению, считаем суммы по столбцам Количество и Сумма по акту, сортируем по Сумма_по_акту
df_top = (
    df_union.groupby(["Наименование_детали", "Обозначение_детали"])
    .agg({"Количество": sum, "Сумма_по_акту": sum})
    .astype({"Количество": "int"})
).sort_values("Сумма_по_акту", ascending=False)

# проверяем сгруппированные значения
# print(df_top["Количество"].sum())  # 6909
# print(round(df_top["Сумма_по_акту"].sum(), 2))  # 99030.76

# добавляем столбец с кумулятивной суммой по столбцу Сумма по акту
df_top["С накоплением"] = df_top["Сумма_по_акту"].cumsum().round(2)
print(df_top)
"""
                                        Количество  Сумма_по_акту  С накоплением
Наименование_детали Обозначение_детали
вал коленчатый      5336-3509110               675       12410.77       12410.77
м/н                 КБПА 45141236               95        9204.12       21614.89
корпус в/н          245-1307025                448        8583.43       30198.32
вал коленчатый      А29.01.004                 644        5158.72       35357.04
колесо турбины      600-1118072                112        4342.24       39699.28
...                                            ...            ...            ...
шестерня            А29.05.200                  70         231.50       98328.83
                    245-1403228                 27         187.92       98516.75
корпус компрессора  КБПА451110000               12         173.52       98690.27
крыльчатка          КБПА451363.10.32            35         172.55       98862.82
корпус компрессора  706-1118130                  6         167.94       99030.76

[61 rows x 3 columns]
"""
# сохраняем в файл .txt по номеру года
with open(
    f"4.1 Сводный итог за {year} год по ТОП-10.txt", "w", encoding="utf-8"
) as file:
    print(f"\tСводные данные за {year} год по ТОП-10 по месяцам года", file=file)
    file.write(df_top.to_string())

# вариант с сохранением в файл .csv
# df_top.to_csv(f"4.1 Сводный итог за {year} год по ТОП-10.txt", sep="\t", mode="w")

print("Файл записан")
