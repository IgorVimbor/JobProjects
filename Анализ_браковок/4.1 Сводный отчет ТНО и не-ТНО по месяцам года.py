import pandas as pd
from datetime import datetime, date
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import reference_files.reference_data as rd

# Команда для удаления предупреждений Pandas в консоли
warnings.simplefilter(action="ignore", category=Warning)

# -------------------------------------- Входные изменяемые данные ------------------------------

year = 2025  # год по которому делаем анализ

# --------------------------------------- Подготовка датафрейма ---------------------------------
now = datetime.now()  # получаем текущую дату
year_now = now.year  # сохраняем текущий год

# считываем данные из файла Excel и создаем фрейм
df = pd.read_excel(
    f"//Server/otk/2 ИННА/Списание БРАКА по ЦЕХАМ/ЖУРНАЛ УЧЕТА актов о браке_2020-{year_now}.xlsx",
    sheet_name=str(year),
    usecols=[
        "Дата_регистрации_акта_НП",
        "Наименование_детали",
        "Обозначение_детали",
        "Количество",
        "Сумма_по_акту",
        "ПРИЧИНА",
        "ВИНОВНИК",
        "Цех_участок",
        "Операция",
        "Описание_дефектов_и_причин",
        "Основание_для_списания (КТУ, акт, протокол и др.)",
    ],
    header=1,
)

# удаляем пустые строки в столбце "Дата_регистрации_акта_НП" и "Сумма_по_акту"
df.dropna(subset=["Дата_регистрации_акта_НП", "Сумма_по_акту"], inplace=True)

# изменяем тип данных в столбце "Дата_регистрации_акта_НП" на datetime
df["Дата_регистрации_акта_НП"] = pd.to_datetime(
    df["Дата_регистрации_акта_НП"], errors="coerce"
)
# изменяем формат на "мм.гг"
df["Дата_регистрации_акта_НП"] = df["Дата_регистрации_акта_НП"].dt.strftime("%m.%y")
# переименовываем столбец
df.rename(columns={"Дата_регистрации_акта_НП": "Дата акта"}, inplace=True)

# изменяем тип данных в столбцах 'Количество', 'ПРИЧИНА', 'ВИНОВНИК'
df[["Количество", "ПРИЧИНА", "ВИНОВНИК"]] = df[
    ["Количество", "ПРИЧИНА", "ВИНОВНИК"]
].astype("int16")


# ------------------------------------- Датафрейм ТНО --------------------------------------------
# Формируем датафрейм по наладке
dfn = df[df["ПРИЧИНА"].isin([8, 23, 24])]

# из вспомогательного словаря заменяем номера причин на их наименование
dfn["ПРИЧИНА"] = dfn["ПРИЧИНА"].map(rd.dct_pric)

# Формируем список месяцев года из датафрейма ТНО
data = dfn["Дата акта"].unique().tolist()

dfs = []  # список фреймов
for d in data:
    # фильтруем датафрейм ТНО по конкретному месяцу
    df_tmp = dfn[dfn["Дата акта"] == d]
    # группируем по "Дата акта", "Наименование_детали", "Обозначение_детали", "ПРИЧИНА"
    # и считаем сумму по столбцам "Количество" и "Сумма_по_акту"
    pivot = df_tmp.groupby(
        ["Дата акта", "Наименование_детали", "Обозначение_детали", "ПРИЧИНА"]
    ).agg({"Количество": sum, "Сумма_по_акту": sum})
    # сортируем по убыванию по сумме "Сумма_по_акту"
    pivot.sort_values(by="Сумма_по_акту", ascending=False, inplace=True)

    # считаем итоговую сумму по столбцу "Сумма_по_акту"
    sum_col = pivot["Сумма_по_акту"].sum()
    # в конец датафрейма добавляем строку с разделительными черточками
    pivot.loc[("", "", "", f"{'-'*16}")] = ["", f"{'-'*10}"]
    # добавляем строку с итоговой суммой
    pivot.loc[("", "", "", "ИТОГО")] = ["", sum_col]
    # добавляем пустую строку
    pivot.loc[("", "", "", "")] = ["", ""]

    dfs.append(pivot)  # добавляем датафрейм в список

# Объединяем все группированные датафреймы из списка dfs в один сводный датафрейм
df_un = pd.concat(dfs, ignore_index=False)

# сохраняем в файл .txt
with open(f"ОТЧЕТЫ/4.1 Сводный отчет ТНО - {year_now} год.txt", "w", encoding="utf-8") as f:
    print(f"\tСводный отчет ТНО - {year_now} год", file=f)
    f.write(df_un.to_string())

print("\nОтчет по ТНО записан.")


# ------------------------------------- Датафрейм не-ТНО --------------------------------------------
# Формируем датафрейм по всем причинам кроме наладки
dfn_no = df[~df["ПРИЧИНА"].isin([8, 23, 24])]
dfn_no["ПРИЧИНА"] = dfn_no["ПРИЧИНА"].map(rd.dct_pric)

# Формируем список месяцев года из датафрейма ТНО
data = dfn_no["Дата акта"].unique().tolist()

dfs_no = []  # список фреймов
for d in data:
    # фильтруем датафрейм ТНО по конкретному месяцу
    df_tmp_no = dfn_no[dfn_no["Дата акта"] == d]
    # группируем по "Дата акта", "Наименование_детали", "Обозначение_детали", "ПРИЧИНА"
    # и считаем сумму по столбцам "Количество" и "Сумма_по_акту"
    pivot_no = df_tmp_no.groupby(
        ["Дата акта", "Наименование_детали", "Обозначение_детали", "ПРИЧИНА"]
    ).agg({"Количество": sum, "Сумма_по_акту": sum})
    # сортируем по убыванию по сумме "Сумма_по_акту"
    pivot_no.sort_values(by="Сумма_по_акту", ascending=False, inplace=True)

    # считаем итоговую сумму по столбцу "Сумма_по_акту"
    sum_col = pivot_no["Сумма_по_акту"].sum()
    # в конец датафрейма добавляем строку с разделительными черточками
    pivot_no.loc[("", "", "", f"{'-'*16}")] = ["", f"{'-'*10}"]
    # добавляем строку с итоговой суммой
    pivot_no.loc[("", "", "", "ИТОГО")] = ["", sum_col]
    # добавляем пустую строку
    pivot_no.loc[("", "", "", "")] = ["", ""]

    dfs_no.append(pivot_no)  # добавляем датафрейм в список

# Объединяем все группированные датафреймы из списка dfs_no в один сводный датафрейм
df_un_no = pd.concat(dfs_no, ignore_index=False)

# сохраняем в файл .txt
with open(f"ОТЧЕТЫ/4.1 Сводный отчет не-ТНО - {year_now} год.txt", "w", encoding="utf-8") as f:
    print(f"\tСводный отчет не-ТНО - {year_now} год", file=f)
    f.write(df_un_no.to_string())

print("\nОтчет по не-ТНО записан.")


# -------------------------------- Выборка по конкретному месяцу или детали ------------------------------

# Мультииндекс сводного датафрейма из группированных датафреймов
df_un.index
"""
MultiIndex([('01.24',     'корпус в/н',     '245-1307025',  8),
            ('01.24', 'вал коленчатый',    '5336-3509110',  8),
               ...             ...            ...          ...
            ('07.24',        'втулка ',     'А57.03.028А',  8)],
           names=['Дата акта', 'Наименование_детали', 'Обозначение_детали', 'ПРИЧИНА'], length=300
"""

# делаем выборку - фильтруем по номеру месяца из первого стролбца мультииндекса
df_07 = df_un.loc[pd.IndexSlice["02.25", :, :], :]

sum_col = df_07["Сумма_по_акту"].sum()
df_07.loc[("", "", "", f"{'-'*16}")] = ["", f"{'-'*10}"]
df_07.loc[("", "", "", "ИТОГО")] = ["", sum_col]
# print(df_07)

# сохраняем в файл .txt
with open(f"ОТЧЕТЫ/Отчет по ТНО - февраль {year_now}.txt", "w", encoding="utf-8") as f:
    print(f"\tОтчет по ТНО - февраль {year_now}", file=f)
    f.write(df_07.to_string())

print("\nОтчет по ТНО за месяц записан.")

# делаем выборку - фильтруем по наименованию из второго стролбца мультииндекса
res = df_un.loc[pd.IndexSlice[:, "вал коленчатый", :], :]

sum_col = res["Сумма_по_акту"].sum()
res.loc[("", "", "", f"{'-'*16}")] = ["", f"{'-'*10}"]
res.loc[("", "", "", "ИТОГО")] = ["", sum_col]
# print(res)

# сохраняем в файл .txt
with open(f"ОТЧЕТЫ/Коленвал-ТНО - {year_now} год.txt", "w", encoding="utf-8") as f:
    print(f"\tКоленвал-ТНО - {year_now} год", file=f)
    f.write(res.to_string())

print("\nОтчет по ТНО по детали записан.")

# ----------------------------------- Построение графиков --------------------------------------------
# делаем выборку по конкретному коленвалу А29
res_01 = res.loc[pd.IndexSlice[:, :, "А29.01.004", :], :]

# Одиночный график
"""
plt.figure(figsize=(8, 5))

sns.barplot(
    res_01,
    x=pd.IndexSlice["Дата акта"],
    y=res_01["Количество"],
    hue=pd.IndexSlice["ПРИЧИНА"],
)
plt.grid(True)
plt.title("Списание коленвала А.29.01.004 в штуках")
"""

# Совмещенный график
fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(12, 5))  # создаем фигуру и оси

# создаем первый график barplot
sns.barplot(
    res_01,
    x=pd.IndexSlice["Дата акта"],
    y=res_01["Количество"],
    hue=pd.IndexSlice["ПРИЧИНА"],
    ax=axs[0],
)

# создаем второй график barplot
sns.barplot(
    res_01,
    x=pd.IndexSlice["Дата акта"],
    y=res_01["Сумма_по_акту"],
    hue=pd.IndexSlice["ПРИЧИНА"],
    ax=axs[1],
)

# устанавливаем заголовки графиков и сетку
axs[0].set_title("Списание коленвала А.29.01.004 в штуках")
axs[0].grid(True, axis="y")
axs[1].set_title("Списание коленвала А.29.01.004 в рублях")
axs[1].grid(True, axis="y")

# Отображаем графики
plt.tight_layout()  # для автоматической регулировки подграфиков
plt.show()
# -------------------------------------------------------------------------------------------------
