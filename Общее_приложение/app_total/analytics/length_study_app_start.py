# Статистика по продолжительности исследования рекламационных изделий
import os
import pandas as pd
import numpy as np
import warnings
import matplotlib.pyplot as plt

import paths # импортируем файл с путями до базы данных, отчетов и др.


# ----------------------------------------- Входные данные и считывание файла ---------------------------------------
year_now = paths.year_now  # текущий год
date_new = paths.date_new  # сегодняшняя дата
file = paths.file_database  # путь к базе рекламаций ОТК

df = pd.read_excel(
    file,
    sheet_name=str(year_now),
    usecols=[
        "Дата поступления сообщения в ОТК",
        "Период выявления дефекта (отказа)",
        "Наименование изделия",
        "Обозначение изделия",
        "Номер рекламационного акта ПРИОБРЕТАТЕЛЯ изделия",
        "Дата рекламационного акта ПРИОБРЕТАТЕЛЯ изделия",
        "Дата поступления изделия",
        "Номер накладной прихода изделия",
        "Дата акта исследования",
    ],
    header=1,
)

# переименовываем столбцы для удобства
df.columns = [
    "Дата сообщения",
    "Потребитель",
    "Наименование",
    "Обозначение",
    "Номер РА",
    "Дата РА",
    "Дата прихода",
    "Номер накладной",
    "Дата исследования"
]

# --------------------------------- Обработка значений столбцов датафрейма ---------------------------------------

# удаляем строки, где отсутствует даты в столбцах "Дата прихода" и "Дата исследования" (оба столбца пустые)
df = df.dropna(subset=["Дата прихода", "Дата исследования"], how='all')

# Заполняем отсутствующие значения в столбце Дата прихода на значения из столбца Дата сообщения, при условии,
# что в столбце Номер накладной стоит "фото", иначе заполняем на None
df["Дата прихода"] = df["Дата прихода"].where(df["Дата прихода"].notnull(), df["Дата сообщения"].where(df["Номер накладной"].str.contains("фото"), None))

# переводим тип данных в столбцах в datetime64
df[["Дата РА", "Дата прихода", "Дата исследования"]] = df[["Дата РА", "Дата прихода", "Дата исследования"]].apply(pd.to_datetime)

# ----------------------------------- Изделия по АСП и ГП по которым НЕТ актов --------------------------------------

# датафрейм изделий АСП по которым нет актов исследования
df_asp_not_act = df[
    (df["Потребитель"].str.contains("АСП") == True)
    & (df["Дата исследования"].isnull())
][
    [
        "Потребитель",
        "Наименование",
        "Обозначение",
        "Номер РА",
        "Дата РА",
        "Дата прихода",
    ]
]

# сохраняем в файл .txt
with open(f"{paths.folder_reports}НЕТ актов АСП - {date_new}.txt", "w", encoding="utf-8") as f:
    print(f"\n\tПеречень актов рекламаций по которым НЕТ актов исследования на {date_new}\n\n", file=f)
    f.write(df_asp_not_act.to_string())

# датафрейм изделий ГП по которым нет актов исследования
df_gp_not_act = df[
    (df["Потребитель"].str.contains("эксплуатация") == True)
    & (df["Дата исследования"].isnull())
][
    [
        "Потребитель",
        "Наименование",
        "Обозначение",
        "Номер РА",
        "Дата РА",
        "Дата прихода",
    ]
]

# сохраняем в файл .txt
with open(f"{paths.folder_reports}НЕТ актов ГП - {date_new}.txt", "w", encoding="utf-8") as f:
    print(f"\n\tПеречень актов рекламаций по которым НЕТ актов исследования ГП на {date_new}\n\n", file=f)
    f.write(df_gp_not_act.to_string())
# -----------------------------------------------------------------------------------------------------

# в столбце "Дата акта исследования" заменяем отсутствующие данные сегодняшней датой
df["Дата исследования"] = (df["Дата исследования"].fillna(date_new).apply(pd.to_datetime))

# создаем новый столбец в разницей между датой акта исследования и датой поступления
df["DIFF"] = (df["Дата исследования"] - df["Дата прихода"]) / np.timedelta64(1, "D")

# ----------------------------- Общая средняя продолжительность исследования -----------------------------

# находим среднее и медианное значение
df_diff_mean = round(df["DIFF"].mean(), 2)  # 4.79
df_diff_median = round(df["DIFF"].median(), 2)  # 2.0

# ----------------------------- Продолжительность исследования по АСП ------------------------------------

df2 = df[df["Потребитель"].str.contains("АСП") == True]

# удаляем строки с сегодняшним приходом
df2 = df2[df2["Дата прихода"].dt.day != date_new]

# сортируем фрейм по убыванию значений стобца "DIFF" и оставляем только строки, где "DIFF" > 5
df2_sort = df2.sort_values(by="DIFF", ascending=False)[df2["DIFF"] >= 5]

# находим среднее и медианное значение
df2_diff_mean = round(df2["DIFF"].mean(), 2)  # 20.11
df2_diff_median = round(df2["DIFF"].median(), 2)  #  5.0

# --------------------------- Продолжительность исследования по ГП ------------------------------------

df3 = df[df["Потребитель"].str.contains("эксплуатация") == True]

# сортируем фрейм по убыванию значений стобца "DIFF" и оставляем только строки, где "DIFF" > 14
df3_sort = df3.sort_values(by="DIFF", ascending=False)[df3["DIFF"] >= 14]

# находим среднее и медианное значение
df3_diff_mean = round(df3["DIFF"].mean(), 2)  # 5.86
df3_diff_median = round(df3["DIFF"].median(), 2)  #  3.0

# ----------------------------------- Результат ---------------------------------------------------
data = [
    [df_diff_mean, df2_diff_mean, df3_diff_mean],
    [df_diff_median, df2_diff_median, df3_diff_median],
]

result = pd.DataFrame(
    data,
    index=["Среднее значение", "Медианное значение"],
    columns=["В целом", "Конвейер", "Эксплуатация"],
)
print(result)

# ---------------------------- Объединенный рисунок из трех гистограмм -----------------------------

# укзываем количество строк и столбцов на рисунке и размеры рисунка
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(12, 5))

# гистограмма по исследованию в целом
axes[0].hist(df["DIFF"], df["DIFF"].count())
axes[0].set_title("Исследование в целом")
axes[0].set_xlim(-2, 40)
axes[0].set_ylim(0, 60)
axes[0].set_xlabel("Количество дней")
axes[0].set_ylabel("Количество исследований\n(значения ограничены для лучшей визуализации)")

# гистограмма по АСП
axes[1].hist(df2["DIFF"], df2["DIFF"].count())
axes[1].set_title("Исследование по АСП")
axes[1].set_xlim(-1, 40)
# axes[1].set_ylim(0, 30)
axes[1].set_xlabel("Количество дней")
axes[1].set_ylabel("Количество исследований")

# истограмма по ГП
axes[2].hist(df3["DIFF"], df3["DIFF"].count())
axes[2].set_title("Исследование по ГП")
axes[2].set_xlim(-1, 40)
# axes[2].set_ylim(0, 100)
axes[2].set_xlabel("Количество дней")
axes[2].set_ylabel("Количество исследований")

# раздвигаем графики друг от друга по ширине
fig.subplots_adjust(wspace=0.3)

# # добавляем заголовок
fig.suptitle(f"{year_now} год", fontsize=16)

plt.show()
