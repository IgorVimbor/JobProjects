# Статистика по продолжительности исследования рекламационных изделий

import pandas as pd
import numpy as np
from datetime import date
import warnings
import matplotlib.pyplot as plt
import seaborn as sns

# убираем вывод информационных сообщений pandas
warnings.simplefilter(action="ignore", category=Warning)

# ----------------------------------------- Настройка вывода датафрейма в консоль ----------------------------------

# устанавливаем максимальное количество столбцов при выводе в консоль
pd.set_option("display.max_columns", 20)
# устанавливаем максимальное количество символов - ширину столбца
pd.set_option("display.max_colwidth", 70)
# устанавливаем ширину консоли
pd.set_option("display.width", 300)

""" Alt + z """  # включить/выключить горизонтальную прокрутку

# ----------------------------------------- Входные данные и считывание файла ---------------------------------------

year_now = date.today().year  # текущий год

file = f"//Server/otk/1 ГАРАНТИЯ на сервере/{str(year_now)}-2019_ЖУРНАЛ УЧЁТА.xlsm"
# file = f"D:/РАБОТА/{str(year_now)}-2019_ЖУРНАЛ УЧЁТА.xlsm"

folder_reports = "//Server/otk/Support_files_не_удалять!!!/"
# folder_reports = "D:/РАБОТА/АНАЛИТИЧЕСКАЯ_СИСТЕМА_УК/"

df = pd.read_excel(
    file,
    sheet_name=str(year_now),
    usecols=[
        "Дата поступления сообщения в ОТК",
        "Период выявления дефекта (отказа)",
        "Наименование изделия",
        "Обозначение изделия",
        "Номер рекламационного акта ПРИОБРЕТАТЕЛЯ изделия",
        "Дата рекламационного акта ПРИОБРЕТАТЕЛЯ изделия",
        "Дата поступления изделия",
        "Номер накладной прихода изделия",
        "Дата акта исследования",
    ],
    header=1,
)

# Переименовываем столбцы для удобства
df.columns = [
    "Дата сообщения", "Потребитель", "Наименование", "Обозначение",
    "Номер РА", "Дата РА", "Дата прихода", "Номер накладной", "Дата исследования"
]

# --------------------------------- Обработка значений столбцов датафрейма ---------------------------------------

# Удаляем строки, где отсутствует дата в столбце "Дата исследования"
df = df.dropna(subset=["Дата исследования"])

# удаляем строки с сегодняшним приходом
df = df[df["Дата прихода"] != date.today()]

# Заполняем отсутствующие значения в столбце Дата прихода на значения из столбца Дата сообщения, при условии,
# что в столбце Номер накладной стоит "фото", иначе заполняем датой исследования
df["Дата прихода"] = df["Дата прихода"].where(
    df["Дата прихода"].notnull(),
    df["Дата сообщения"].where(df["Номер накладной"].str.contains("фото"), df["Дата исследования"])
    )

# переводим тип данных в столбцах в datetime64
df[["Дата РА", "Дата прихода", "Дата исследования"]] = df[["Дата РА", "Дата прихода", "Дата исследования"]].apply(pd.to_datetime)

# создаем новый столбец в разницей между датой акта исследования и датой поступления
df["DIFF"] = (df["Дата исследования"] - df["Дата прихода"]) / np.timedelta64(1, "D")

# ----------------------------- Общая средняя продолжительность исследования -----------------------------

# находим среднее и медианное значение
df_diff_mean = round(df["DIFF"].mean(), 2)  # 4.79
df_diff_median = round(df["DIFF"].median(), 2)  # 2.0

# ----------------------------- Продолжительность исследования по АСП ------------------------------------

df2 = df[df["Потребитель"].str.contains("АСП") == True]
# находим среднее и медианное значение
df2_diff_mean = round(df2["DIFF"].mean(), 2)  # 20.11
df2_diff_median = round(df2["DIFF"].median(), 2)  #  5.0

# --------------------------- Продолжительность исследования по ГП ------------------------------------

df3 = df[df["Потребитель"].str.contains("эксплуатация") == True]
# находим среднее и медианное значение
df3_diff_mean = round(df3["DIFF"].mean(), 2)  # 5.86
df3_diff_median = round(df3["DIFF"].median(), 2)  #  3.0

# ----------------------------------- Результат ---------------------------------------------------

result = pd.DataFrame(
    [
        [df_diff_mean, df2_diff_mean, df3_diff_mean],
        [df_diff_median, df2_diff_median, df3_diff_median]
    ],
    index=["Среднее значение", "Медианное значение"],
    columns=["В целом", "Конвейер", "Эксплуатация"],
)

print(result)

# ------------------------------ Строим графики по отдельности -------------------------------------

# # строим общую гистограмму
# sns.histplot(data=df, x="DIFF", kde=True)
# plt.xlim(-2, 110)
# plt.ylim(0, 60)
# plt.title("Исследование в целом\n(значения по оси Y ограничены для лучшей визуализации)")
# # plt.show()

# # строим гистограмму по АСП
# sns.histplot(data=df2, x="DIFF", kde=True)
# plt.xlim(-1, 110)
# # plt.ylim(0, 30)
# plt.title("Исследование по АСП")
# # plt.show()

# # строим гистограмму по ГП
# sns.histplot(data=df3, x="DIFF", kde=True)
# plt.xlim(-1, 40)
# # plt.ylim(0, 100)
# plt.title("Исследование по ГП")
# # plt.show()

# ---------------------------- Объединенный рисунок из трех гистограмм -----------------------------

# укзываем количество строк и столбцов на рисунке, размеры рисунка
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 5))

#    вариант 1 - простые гистограммы Matplotlib
# axes[0].hist(df["DIFF"], df["DIFF"].count())
# axes[1].hist(df2["DIFF"], df2["DIFF"].count())
# axes[2].hist(df3["DIFF"], df3["DIFF"].count())
# plt.show()

#    вариант 2 - гистограммы Seaborn
# строим общую гистограмму
sns.histplot(data=df, x="DIFF", kde=True, ax=axes[0])
axes[0].set_title("Исследование в целом")
axes[0].set_xlim(-2, 110)
# axes[0].set_ylim(0, 60)
axes[0].set_xlabel("Количество дней")
axes[0].set_ylabel("Количество исследований")

# строим гистограмму по АСП
sns.histplot(data=df2, x="DIFF", kde=True, ax=axes[1])
axes[1].set_title("Исследование по АСП")
axes[1].set_xlim(-1, 110)
# axes[1].set_ylim(0, 30)
axes[1].set_xlabel("Количество дней")
axes[1].set_ylabel("Количество исследований")

# строим гистограмму по ГП
sns.histplot(data=df3, x="DIFF", kde=True, ax=axes[2])
axes[2].set_title("Исследование по ГП")
axes[2].set_xlim(-1, 40)
# axes[2].set_ylim(0, 100)
axes[2].set_xlabel("Количество дней")
axes[2].set_ylabel("Количество исследований")

# раздвигаем графики друг от друга по ширине
fig.subplots_adjust(wspace=0.3)

# добавляем заголовок
fig.suptitle(f"{year_now} год", fontsize=16)

plt.show()
