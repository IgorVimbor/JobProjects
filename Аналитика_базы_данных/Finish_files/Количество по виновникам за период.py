import json
from datetime import datetime
import pandas as pd
import os
import win32com.client
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font, Border, Side

import warnings

warnings.simplefilter(action="ignore", category=Warning)


year_now = datetime.today().year  # текущий год

# имя файла базы рекламаций с учетом текущего года
# file = "//Server/otk/1 ГАРАНТИЯ на сервере/" + str(year_now) + "-2019_ЖУРНАЛ УЧЁТА.xlsm"
file = f"D:/РАБОТА/{str(year_now)}-2019_ЖУРНАЛ УЧЁТА.xlsm"

# ------------------------- Создание датафрейма из файла Excel -----------------------------
df = pd.read_excel(
    file,
    sheet_name=str(year_now),
    usecols=[
        "Период выявления дефекта (отказа)",
        "Обозначение изделия",
        "Заводской номер изделия",
        "Дата изготовления изделия",
        "Количество предъявленных изделий",
        "Номер акта исследования",
        "Виновник дефекта - БЗА",
        "Виновное подразделение",
        "Причины возникновения дефектов",
        "Пояснения к причинам возникновения дефектов",
    ],
    header=1,
)

# ---------------------- Обработка отсутствующих значений и типов данных -------------------

# Удаляем строки с отсутствующим номером акта исследования
df.dropna(subset=['Номер акта исследования'], inplace=True)

# Заменяем NaN на "БЗА" только если в столбце "Виновник дефекта - БЗА" стоит "+"
# вариант 1 - одним выражением
df.loc[
    (df['Виновное подразделение'].isna()) & (df['Виновник дефекта - БЗА'] == '+'),
    'Виновное подразделение'
] = "БЗА"

# вариант 2 - более читаемый через отдельное условие и замену
# # Условие: NaN в "Виновное подразделение" И "+" в "Виновник дефекта - БЗА"
# condition = (
#     df['Виновное подразделение'].isna() &
#     (df['Виновник дефекта - БЗА'] == '+')
# )
# df.loc[condition, 'Виновное подразделение'] = "БЗА"

# Изменяем тип данных с float на int
df["Количество предъявленных изделий"] = df["Количество предъявленных изделий"].astype("int32")

# Извлекаем номер акта исследования как строку (сохраняем суффиксы)
df['Номер акта исследования'] = df['Номер акта исследования'].str.split(' № ').str[1]


# ------------------------ Вспомогательные функции и манипуляции --------------------------

# Функция для безопасного извлечения числовой части для сравнения
def get_numeric_part(act_str):
    """Извлекает числовую часть для сравнения: '824-1' -> 824"""
    try:
        return int(act_str.split('-')[0])
    except (ValueError, IndexError, AttributeError):
        return 0

# Создаем столбец для сравнения
df['act_number'] = df['Номер акта исследования'].apply(get_numeric_part)


# ------------------------ Основная логика и вывод результата ------------------------------

# Номер акта исследования по которому делался предыдущий анализ
user_number = int(input("Введите номер акта исследования: "))

# Фильтрация по числовой части (оставляем акты с номером начиная с user_number + 1)
df_filtered = df[df['act_number'] > (user_number)]

# Извлекаем номера актов
act_numbers = df_filtered['Номер акта исследования'].unique()

# Сортируем по кастомному ключу и берем последний
max_act_number = sorted(act_numbers, key=lambda x: (
    int(x.split('-')[0]) if '-' in x else int(x),
    int(x.split('-')[1]) if '-' in x else 0
))[-1]

print(f"Максимальный номер акта исследования: {max_act_number}")

# Убираем служебный столбец
df_filtered = df_filtered.drop(columns='act_number')

# Группировка
df_grouped = df_filtered.groupby([
    'Виновное подразделение',
    'Период выявления дефекта (отказа)',
    'Обозначение изделия'
]).agg({
    'Заводской номер изделия': lambda x: ', '.join(x.dropna().astype(str).unique()),
    'Дата изготовления изделия': lambda x: ', '.join(x.dropna().unique()),
    'Количество предъявленных изделий': 'sum',
    'Номер акта исследования': lambda x: ', '.join(x.dropna().unique()),
    'Причины возникновения дефектов': lambda x: ', '.join(x.dropna().unique()),
    'Пояснения к причинам возникновения дефектов': lambda x: ', '.join(x.dropna().unique())
})

# Разделяем по мультииндексу
# Датафрейм с неопределенным виновником (Виновник БЗА)
df_bza = df_grouped.loc[df_grouped.index.get_level_values('Виновное подразделение') == 'БЗА']
print(df_bza)
print()
# Датафрейм с виновниками
df_not_bza = df_grouped.loc[df_grouped.index.get_level_values('Виновное подразделение') != 'БЗА']
print(df_not_bza)