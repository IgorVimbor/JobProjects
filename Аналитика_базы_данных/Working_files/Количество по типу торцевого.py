import pandas as pd
import numpy as np
from datetime import date
import warnings
import sys

sys.path.insert(0, "E:/MyRepositories/JobProjects/Аналитика_базы_данных/functions/")
from out_dataframe import MyFrame

# Команда для удаления предупреждений Pandas в консоли
warnings.simplefilter(action="ignore", category=Warning)
# То есть предупреждения типа:
""" A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead  """
# не будут показываться
# --------------------------------------------------------------------------------------------------------------


client = "ЯМЗ - эксплуатация"  # потребитель
product = "водяной насос"  # изделие по которому будет формироваться отчет

data_2024 = MyFrame(2024, client, product).get_frame()
data_2023 = MyFrame(2023, client, product).get_frame()  # (236, 7)
data_2022 = MyFrame(2022, client, product).get_frame()  # (210, 7)
data_2021 = MyFrame(2021, client, product).get_frame()  # (192, 7)
data_2020 = MyFrame(2020, client, product).get_frame()  # (145, 7)

# создаем сводный датафрейм из датафреймов по годам
df = pd.concat([data_2024, data_2023, data_2022, data_2021, data_2020])

# удаляем строки датафрейма, в которых столбец 'Дата изготовления изделия' содержит пропуски
df.dropna(subset=["Дата изготовления изделия"], inplace=True)

# список столбцов датафрейма
lst = df.columns.values.tolist()
# ['Месяц регистрации',
# 'Дата изготовления изделия',
# 'Транспортное средство (установка)',
# 'Пробег, наработка',
# 'Причины возникновения дефектов',
# 'Пояснения к причинам возникновения дефектов',
# 'Поставщик дефектного комплектующего']

# унифицируем (переименовываем) названия торцевых уплотнений
df["Поставщик дефектного комплектующего"] = df[
    "Поставщик дефектного комплектующего"
].replace(
    {
        "КАСО\nAAHU-15.9x36.45/42x\n10.8 SIC-SIC 07.05.19": "KACO",
        "КАСО": "KACO",
        "КАСО\nAAHU-15.9x36.45/42x\n10.8 SIC-SIC 05.09.19": "KACO",
        "КАСО,\nIHPFO\n": "KACO",
        "SP5343-YMZ (94555)": "UMBRA",
        "ПС": "IIC",
        "IIC": "IIC",
        "IIC-WT16-09-2020": "IIC",
    }
)
# количество по видам торцевого уплотнения с учетом пропусков
torc = df["Поставщик дефектного комплектующего"].value_counts(dropna=False)
# Name: Поставщик дефектного комплектующего, dtype: int64
# KACO     271
# NaN      160
# IIC      150
# UMBRA    131
# Всего:   712

# ---------------------------------------- только для ЯМЗ ----------------------------------------------
# заполняем пропуски - указываем название торцевого уплотнения в зависимости от даты изготовления насоса
# 1. КАСО стали ставить в мае 2019. До этого - UMBRA
# 2. В марте 2021, декабре 2022 и начиная с марта 2023 - ставили IIC
# 3. С мая 2019 по февраль 2022 (за исключением марта 2021 и декабря 2022) - ставили КАСО
df.loc[
    (df["Дата изготовления изделия"] < "2019-05-01")
    & df["Поставщик дефектного комплектующего"].isna(),
    "Поставщик дефектного комплектующего",
] = "UMBRA"

df.loc[
    (
        (df["Дата изготовления изделия"].isin(["2021-03-01", "2022-12-01"]))
        | (df["Дата изготовления изделия"] > "2022-02-01")
    )
    & df["Поставщик дефектного комплектующего"].isna(),
    "Поставщик дефектного комплектующего",
] = "IIC"

df.loc[
    (
        (df["Дата изготовления изделия"].between("2019-05-01", "2022-02-01"))
        | ~(df["Дата изготовления изделия"].isin(["2021-03-01", "2022-12-01"]))
    )
    & df["Поставщик дефектного комплектующего"].isna(),
    "Поставщик дефектного комплектующего",
] = "KACO"
# ------------------------------------------------------------------------------------------------------

# количество по видам торцевого уплотнения и пропорцией повторений (если умножить на 100, то будут проценты)
torc = pd.DataFrame()
torc["Количество"] = df["Поставщик дефектного комплектующего"].value_counts(
    dropna=False
)
torc["Процент"] = df["Поставщик дефектного комплектующего"].value_counts(
    dropna=False, normalize=True
)
# print(torc)
# Name: Поставщик дефектного комплектующего, dtype: int64
#        Количество   Процент
# KACO          418  0.558824
# IIC           184  0.245989
# UMBRA         146  0.195187
# Всего:        748

# средний пробег по видам торцевого уплотнения
# new_df = df.groupby('Поставщик дефектного комплектующего')['Пробег, наработка'].mean().round(2)

# общее количество торцевых уплотнений в датафрейме
# df.shape[0] -> 748
all_count = df["Поставщик дефектного комплектующего"].value_counts().sum()

# итоговый датафрейм: поставщик - количество по видам торцевого - процентное отношение - средний пробег
new_df = df.groupby("Поставщик дефектного комплектующего").agg(
    count=("Поставщик дефектного комплектующего", pd.Series.count),
    percent_part=(
        "Поставщик дефектного комплектующего",
        lambda s: (s.value_counts() * 100 / all_count).round(2),
    ),
    probeg=("Пробег, наработка", lambda s: s.mean().round(2)),
)

new_df.columns = ["Количество", "Доля в %", "Средний пробег"]

print("\n\n", new_df)
"""
                                      Количество  Доля в %  Средний пробег
Поставщик дефектного комплектующего
IIC                                         363     26.19        32897.94
ISKRA INTER COMMERCE LTD                    402     29.00        46683.68
KACO                                        475     34.27        71582.83
UMBRA                                       146     10.53        84619.68
"""
