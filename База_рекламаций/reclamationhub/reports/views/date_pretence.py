from django.shortcuts import render
from django.http import HttpResponse
from datetime import datetime

from claims.models import Claim


# def date_pretence_page(request):
#     """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è '–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∞–∫—Ç–∞ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏'"""
#     context = {
#         "page_title": "–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏",
#         "module_name": "Date Pretence",
#         "description": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏ (–≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ç—Ä–æ—è –∏–∑–¥–µ–ª–∏—è)",
#         "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
#     }
#     return render(request, "reports/date_pretence.html", context)


def date_pretence_page(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏"""

    if request.method == "POST":
        claim_number = request.POST.get("claim_number", "").strip()

        if not claim_number:
            return render(
                request,
                "reports/date_pretence.html",
                {
                    "page_title": "–î–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏",
                    "error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏",
                },
            )

        # –ò—â–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏
        claims = Claim.objects.filter(claim_number=claim_number).prefetch_related(
            "reclamations"
        )
        # select_related - –¥–ª—è ForeignKey –∏ OneToOneField
        # prefetch_related - –¥–ª—è ManyToManyField –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π

        if not claims.exists():
            return render(
                request,
                "reports/date_pretence.html",
                {
                    "page_title": "–î–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏",
                    "error": f'–ü—Ä–µ—Ç–µ–Ω–∑–∏—è —Å –Ω–æ–º–µ—Ä–æ–º "{claim_number}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                },
            )

        # –°–æ–∑–¥–∞–µ–º TXT —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π –¥–∞–Ω–Ω—ã—Ö
        txt_content = generate_claims_table(claims, claim_number)

        # –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—á–∞—Ç–∏
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–î–∞–Ω–Ω—ã–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ ‚Ññ{claim_number}</title>
            <style>
                body {{ margin: 2px 20px; font-family: monospace; }}
                .container {{ white-space: pre-wrap; display: inline-block; }}
                .print-btn {{ text-align: right; margin-bottom: 0; }}
                @media print {{ .print-btn {{ display: none; }} }}
            </style>
        </head>
        <body>
            <div class="container">
                {txt_content}
                <div class="print-btn">
                    <button onclick="window.print()">üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å</button>
                </div>
            </div>
        </body>
        </html>
        """

        return HttpResponse(html_content, content_type="text/html; charset=utf-8")

    # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    context = {
        "page_title": "–î–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏",
    }
    return render(request, "reports/date_pretence.html", context)


def generate_claims_table(claims, claim_number):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –∞–∫—Ç–æ–≤ –ø–æ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏"""

    content = []
    content.append(f"–î–ê–ù–ù–´–ï –ê–ö–¢–û–í –ü–û –ü–†–ï–¢–ï–ù–ó–ò–ò ‚Ññ {claim_number}")
    content.append("\n")  # 2 –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∏
    content.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–æ–≤: {claims.count()}")
    content.append(f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    content.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (5 —Å—Ç–æ–ª–±—Ü–æ–≤)
    content.append("-" * 95)
    headers = [
        "‚Ññ –ø/–ø".ljust(5),
        "–ê–∫—Ç —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏".ljust(22),
        "–ê–∫—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è".ljust(20),
        "–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".ljust(17),
        "–ù–∞–∫–ª–∞–¥–Ω–∞—è –ø—Ä–∏—Ö–æ–¥–∞".ljust(20),
    ]
    content.append(" | ".join(headers))
    content.append("-" * 95)

    # –°—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    for i, claim in enumerate(claims, 1):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–∫—Ç —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏
        if claim.reclamation_act_number and claim.reclamation_act_date:
            reclamation_act = f"{claim.reclamation_act_number} –æ—Ç {claim.reclamation_act_date.strftime('%d.%m.%Y')}"
        elif claim.reclamation_act_number:
            reclamation_act = claim.reclamation_act_number
        else:
            reclamation_act = "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–∫—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        if claim.investigation_act_number and claim.investigation_act_date:
            try:
                # –ë–µ—Ä–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                inv_number_part = (
                    claim.investigation_act_number.split()[2]
                    if len(claim.investigation_act_number.split()) > 1
                    else claim.investigation_act_number
                )
                investigation_act = f"{inv_number_part} –æ—Ç {claim.investigation_act_date.strftime('%d.%m.%Y')}"
            except (IndexError, AttributeError):
                investigation_act = f"{claim.investigation_act_number} –æ—Ç {claim.investigation_act_date.strftime('%d.%m.%Y')}"
        elif claim.investigation_act_number:
            try:
                inv_number_part = (
                    claim.investigation_act_number.split()[1]
                    if len(claim.investigation_act_number.split()) > 1
                    else claim.investigation_act_number
                )
                investigation_act = inv_number_part
            except (IndexError, AttributeError):
                investigation_act = claim.investigation_act_number
        else:
            investigation_act = "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        row = [
            str(i).ljust(5),
            reclamation_act[:30].ljust(22),
            investigation_act[:25].ljust(20),
            (
                claim.message_received_date.strftime("%d.%m.%Y")
                if claim.message_received_date
                else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            ).ljust(17),
            (claim.receipt_invoice_number or "–ù–µ —É–∫–∞–∑–∞–Ω")[:25].ljust(20),
        ]
        content.append(" | ".join(row))

    content.append("-" * 95)
    content.append(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {claims.count()}")

    return "\n".join(content)
