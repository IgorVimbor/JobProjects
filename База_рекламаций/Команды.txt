1. Все команды выполняются из папки проекта

Войти в папку проекта: cd <папка проекта>
cd reclamationhub

------------ Запуск проекта (если дефолтный settings.py)
python manage.py runserver

------------ Запуск проекта при разработке (settings/development.py)
python manage.py runserver --settings=reclamationhub.settings.development

------------ Запуск проекта в продакшене (settings/production.py)
python manage.py runserver 0.0.0.0:8000 --settings=reclamationhub.settings.production

------------ Как подключиться другим устройствам
На моем рабочем ПК: http://localhost:8000

На других ПК в сети: http://192.168.0.191:8000 (http://ваш_IP:8000)

-----------------------------------------------------------------------------------

2. Создание приложения в проекте

python manage.py startapp <название приложения>
Например: python manage.py startapp sourcebook

-----------------------------------------------------------------------------------

3. Создание и применение миграций
python manage.py makemigrations
python manage.py migrate

   Обновление статических файлов после их изменения
python manage.py collectstatic

-----------------------------------------------------------------------------------

4. Создание суперпользователя
python manage.py createsuperuser
Имя: root
Пароль: 4043
Адрес электронной почты: vasilenok.igor@mail.ru

-----------------------------------------------------------------------------------

5. Запуск Django shell
python manage.py shell_plus --print-sql

-- Фильтрация
Product.objects.filter(product_type__name='Насос')

-- Сложные запросы
from django.db.models import Count
ProductType.objects.annotate(products_count=Count('products'))

-- Проверка связей
product = Product.objects.first()
print(f"Тип: {product.product_type}")
print(f"Рекламации: {product.reclamations.all()}")

-----------------------------------------------------------------------------------

6. Подключение к MySQL в командной строке из папки проекта

Команда: mysql -u root -p
Ввод пароля: <пароль>

-----------------------------------------------------------------------------------

7. Бэкап базы данных MySQL в файл .sql и восстановление данных:

---------- Бэкап существующих таблиц
Bash
mysqldump -u root -p имя_базы_MySQL имя_таблицы > имя_файла_бэкапа

mysqldump -u root -p reclamation_db organizations > period_defect_backup.sql
mysqldump -u root -p reclamation_db product_types > product_types_backup.sql
mysqldump -u root -p reclamation_db product > product_backup.sql

    Создание дампа (бэкап) всей базы данных в файл full_dump.sql
mysqldump -u rh_user -p --routines --triggers --default-character-set=utf8mb4 reclamation_db > full_dump.sql

----------- Восстановление данных из бэкапа:

-- Откройте Command Prompt (cmd.exe) и выполните:
mysqldump -u root -p имя_базы_MySQL < имя_файла_бэкапа

mysql -u root -p reclamation_db < period_defect_backup.sql
mysql -u root -p reclamation_db < product_types_backup.sql
mysql -u root -p reclamation_db < product_backup.sql

    Импорт данных из дампа (бэкапа) на рабочем ПК
mysql -u ваш_пользователь -p --default-character-set=utf8mb4 reclamation_db < full_dump.sql
mysql -u rh_user -p --default-character-set=utf8mb4 reclamation_db < full_dump.sql

-----------------------------------------------------------------------------------

8. Создание фикстур данных в файл .json из существующих таблиц в Django:

------------ Создание фикстур

8.1 Создать в проекте каталог fixtures

8.2 Сделать фикстуру (дамп) командой:
python manage.py dumpdata --indent=2 --output=fixtures/db.json --exclude=auth.permission --exclude=contenttypes

(--exclude auth.permission --exclude contenttypes, потому что эти данные автоматически создаются Django и их не нужно сохранять.
Их исключение - это стандартная практика.)

-- Если выходной файл `db.json` сохраняется не в кодировке `UTF-8`, то можно дополнительно прописать флаг `-Xutf8` следующим образом:

python -Xutf8 manage.py dumpdata --indent=2 --output=fixtures/db.json --exclude=auth.permission --exclude=contenttypes

------------- Загрузка данных из фикстур:

python manage.py loaddata fixtures/db.json

-------------------------------------------------------------------------------------

-- Удаление таблиц аутентификации
DROP TABLE IF EXISTS auth_user_user_permissions;
DROP TABLE IF EXISTS auth_user_groups;
DROP TABLE IF EXISTS auth_group_permissions;
DROP TABLE IF EXISTS auth_group;
DROP TABLE IF EXISTS auth_permission;
DROP TABLE IF EXISTS auth_user;

-- Удаление системных таблиц Django
DROP TABLE IF EXISTS django_admin_log;
DROP TABLE IF EXISTS django_content_type;
DROP TABLE IF EXISTS django_migrations;
DROP TABLE IF EXISTS django_session;

-- Удаление ваших таблиц
drop table if exists reclamation;
drop table if exists reclamation_act;
drop table if exists claim;
DROP TABLE IF EXISTS period_defect;
DROP TABLE IF EXISTS product_type;
DROP TABLE IF EXISTS product;
drop table if exists engine_transport;
drop table if exists investigation;

-------------------------------------------------------------------------------------

-- Копирование данных из таблицы organizations базы old_db в таблицу period_defect базы reclamation_db
INSERT INTO reclamation_db.period_defect
SELECT * FROM old_db.organizations;

-------------------------------------------------------------------------------------

    -- Для проверки триггеров
SHOW TRIGGERS FROM reclamation_db;
-- или
SELECT * FROM information_schema.TRIGGERS
WHERE TRIGGER_SCHEMA = 'reclamation_db';

    -- Для проверки хранимых процедур
SHOW PROCEDURE STATUS WHERE Db = 'reclamation_db';
-- или
SELECT * FROM information_schema.ROUTINES
WHERE ROUTINE_SCHEMA = 'reclamation_db'
AND ROUTINE_TYPE = 'PROCEDURE';

    -- Для проверки функций
SHOW FUNCTION STATUS WHERE Db = 'reclamation_db';
-- или
SELECT * FROM information_schema.ROUTINES
WHERE ROUTINE_SCHEMA = 'reclamation_db'
AND ROUTINE_TYPE = 'FUNCTION';
--------------------------------------------------------------------------------------
